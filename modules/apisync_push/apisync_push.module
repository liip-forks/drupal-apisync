<?php

/**
 * @file
 * Push updates to remote when a Drupal entity is updated.
 */

declare(strict_types = 1);

use Drupal\apisync\Event\ApiSyncErrorEvent;
use Drupal\apisync\Event\ApiSyncEvents;
use Drupal\apisync_mapping\Entity\ApiSyncMappedObjectInterface;
use Drupal\apisync_mapping\Entity\ApiSyncMappedObjectTypeInterface;
use Drupal\apisync_mapping\Entity\ApiSyncMappingInterface;
use Drupal\apisync_mapping\Event\ApiSyncPushAllowedEvent;
use Drupal\apisync_mapping\Event\ApiSyncPushOpEvent;
use Drupal\apisync_mapping\MappingConstants;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_entity_insert().
 */
function apisync_push_entity_insert(EntityInterface $entity) {
  apisync_push_entity_crud($entity, MappingConstants::APISYNC_MAPPING_SYNC_DRUPAL_CREATE);
}

/**
 * Implements hook_entity_update().
 */
function apisync_push_entity_update(EntityInterface $entity) {
  apisync_push_entity_crud($entity, MappingConstants::APISYNC_MAPPING_SYNC_DRUPAL_UPDATE);
}

/**
 * Implements hook_entity_delete().
 */
function apisync_push_entity_delete(EntityInterface $entity) {
  apisync_push_entity_crud($entity, MappingConstants::APISYNC_MAPPING_SYNC_DRUPAL_DELETE);
}

/**
 * Push entities to remote.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity object.
 * @param string $op
 *   The trigger being responded to.
 *   One of push_create, push_update, push_delete.
 *
 * @todo At some point all these hook_entity_* implementations will go away.
 *   We'll create an event subscriber class to respond to entity events and
 *   delegate actions to the appropriate Push procedures. Unfortunately this
 *   point seems to be a very long ways away.
 *   https://www.drupal.org/node/2551893
 */
function apisync_push_entity_crud(EntityInterface $entity, $op) {
  // Don't allow mapped objects, mappings or mapped object types to be pushed!
  if (!empty($entity->apisync_pull)
      || $entity instanceof ApiSyncMappedObjectInterface
      || $entity instanceof ApiSyncMappingInterface
      || $entity instanceof ApiSyncMappedObjectTypeInterface
  ) {
    return;
  }

  $properties = [];

  $entity_type = $entity->getEntityTypeId();
  if ($entity_type) {
    $properties['drupal_entity_type'] = $entity_type;
  }
  $bundle = $entity->bundle();
  if ($bundle) {
    $properties['drupal_bundle'] = $bundle;
  }

  /** @var \Drupal\apisync_mapping\Entity\ApiSyncMapping[] $mappings */
  $mappings = \Drupal::service('entity_type.manager')
    ->getStorage('apisync_mapping')
    ->loadPushMappingsByProperties($properties);
  if (empty($mappings)) {
    return;
  }

  foreach ($mappings as $mapping) {
    if (!$mapping->checkTriggers([$op])) {
      continue;
    }
    try {
      apisync_push_entity_crud_mapping($entity, $op, $mapping);
    }
    catch (\Exception $e) {
      // Do not allow any exception to prevent entity CRUD.
      \Drupal::service('event_dispatcher')->dispatch(new ApiSyncErrorEvent($e), ApiSyncEvents::ERROR);
    }
  }
}

/**
 * Helper method for apisync_push_entity_crud()
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param string $op
 *   The current CRUD operation.
 * @param \Drupal\apisync_mapping\Entity\ApiSyncMappingInterface $mapping
 *   The mapping.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apisync_push_entity_crud_mapping(EntityInterface $entity, $op, ApiSyncMappingInterface $mapping) {

  // Look for existing mapped object or create a new one (except for deletes).
  $props = [
    'drupal_entity__target_type' => $entity->getEntityTypeId(),
    'drupal_entity__target_id' => $entity->id(),
    'apisync_mapping' => $mapping->id(),
  ];

  /** @var \Drupal\apisync_mapping\Entity\ApiSyncMappedObjectInterface[] $mapped_objects */
  $mapped_objects = \Drupal::service('entity_type.manager')
    ->getStorage('apisync_mapped_object')
    ->loadByProperties($props);

  if (empty($mapped_objects)) {
    // No mappings found.
    if ($op === MappingConstants::APISYNC_MAPPING_SYNC_DRUPAL_DELETE) {
      \Drupal::service('queue.apisync_push')
        ->setName($mapping->id())
        ->deleteItemByEntity($entity);
      return;
    }

    /** @var \Drupal\apisync_mapping\ApiSyncMappedObjectFactoryInterface $mapped_object_factory */
    $mapped_object_factory = \Drupal::service('apisync_mapping.mapped_object_factory');
    // This mapped_object may not be saved until an apisync_id is added.
    $mapped_object = $mapped_object_factory->create($mapping, NULL, NULL);
    $mapped_object->setDrupalEntity($entity);
  }
  else {
    // There should really only be one in this case, since we're loading on a
    // multi-field unique key, but loadByProperties returns an array.
    $mapped_object = current($mapped_objects);
  }

  // Event subscribers should call $event->disallowPush() to prevent push.
  $event = \Drupal::service('event_dispatcher')->dispatch(
    new ApiSyncPushAllowedEvent($mapped_object, $op),
    ApiSyncEvents::PUSH_ALLOWED
  );
  if ($event->isPushAllowed() === FALSE) {
    return;
  }

  // Enqueue async push if the mapping is configured to do so, and quit.
  if ($mapping->async) {
    try {
      apisync_push_enqueue_async($entity, $mapping, $mapped_object, $op);
    }
    catch (\Exception $e) {
      \Drupal::service('event_dispatcher')->dispatch(new ApiSyncErrorEvent($e), ApiSyncEvents::ERROR);
    }
    return;
  }

  // Attempt real-time push. Enqueue async push on failure.
  try {
    \Drupal::service('event_dispatcher')->dispatch(
      new ApiSyncPushOpEvent($mapped_object, $op),
      ApiSyncEvents::PUSH_MAPPING_OBJECT
    );

    // If this is a delete, destroy the API Sync object.
    if ($op == MappingConstants::APISYNC_MAPPING_SYNC_DRUPAL_DELETE) {
      $mapped_object->pushDelete();
    }
    else {
      // Otherwise, push to remote. This also saves the mapped object.
      $mapped_object->push();
    }

    // On success, delete any push queue items for this entity.
    \Drupal::service('queue.apisync_push')
      ->setName($mapping->id())
      ->deleteItemByEntity($entity);
  }
  catch (\Exception $e) {

    \Drupal::service('event_dispatcher')->dispatch(
      new ApiSyncPushOpEvent($mapped_object, $op),
      ApiSyncEvents::PUSH_FAIL
    );

    \Drupal::service('event_dispatcher')->dispatch(new ApiSyncErrorEvent($e), ApiSyncEvents::ERROR);
    try {
      apisync_push_enqueue_async($entity, $mapping, $mapped_object, $op);
    }
    catch (\Exception $e) {
      \Drupal::service('event_dispatcher')->dispatch(new ApiSyncErrorEvent($e), ApiSyncEvents::ERROR);
    }

    if (!$mapped_object->isNew()) {
      // Only update existing mapped objects.
      $mapped_object
        ->set('last_sync_action', $op)
        ->set('last_sync_status', FALSE)
        ->set('revision_log_message', $e->getMessage())
        ->save();
    }
  }
}

/**
 * Insert a new queue item into the async push queue for the given mapping.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 * @param \Drupal\apisync_mapping\Entity\ApiSyncMappingInterface $mapping
 *   The mapping.
 * @param string $op
 *   The operation.
 */
function apisync_push_enqueue_async(EntityInterface $entity, ApiSyncMappingInterface $mapping, ApiSyncMappedObjectInterface $mapped_object = NULL, $op) {
  // Each mapping has its own queue, so that like entries can be easily grouped
  // for batching. Each queue item is a unique array of entity ids to be
  // pushed. The async queue worker loads the queue item and works through as
  // many entities as possible, up to the async limit for this mapping.
  $props = [
    'name' => $mapping->id(),
    'entity_id' => $entity->id(),
    'op' => $op,
  ];
  if ($mapped_object) {
    $props['mapped_object_id'] = $mapped_object->id();
  }

  \Drupal::service('queue.apisync_push')->createItem($props);
}

/**
 * Implements hook_cron().
 */
function apisync_push_cron() {
  $queue = \Drupal::service('queue.apisync_push');
  if (\Drupal::config('apisync.settings')->get('standalone')) {
    // If global standalone processing is enabled, stop here.
    return;
  }
  try {
    // Process mappings only for those which are not marked standalone.
    $mappings = \Drupal::service('entity_type.manager')
      ->getStorage('apisync_mapping')
      ->loadCronPushMappings();
    if (empty($mappings)) {
      return;
    }
    $queue->processQueues($mappings);
  }
  catch (\Exception $e) {
    \Drupal::service('event_dispatcher')->dispatch(new ApiSyncErrorEvent($e), ApiSyncEvents::ERROR);
  }
}
